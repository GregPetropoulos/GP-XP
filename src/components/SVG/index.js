// import React from "react"
import React, { useState, createRef, useEffect } from "react";
import styled from "styled-components";
import { useInView } from "react-intersection-observer";
import Row from "react-bootstrap/Row";
import Container from "react-bootstrap/Container";
import Col from "react-bootstrap/Col";


const SvgComponent = (props) => {
  const [inViewRef, inView] = useInView({
    triggerOnce: true,
  });
  const pathRef = createRef();
  const [pathLength, setPathLength] = useState();
  useEffect(() => {
    if (pathRef.current) {
      setPathLength(pathRef.current.getTotalLength());
    }
  }, [pathRef]);
  return (
      <Container>
<Row>
<Col className='text-center'>
    <Wrapper ref={inViewRef} pathLength={pathLength}>
      <svg
        className={inView ? "animated visible" : "animated"}
        // width={3196}
        // height={1100}
        viewBox="0 0 3196 1100"
        {...props}
        >
        <path
        ref={pathRef}
        d="M54.926 272.23c172.97-89.16 181.618-166.27 181.618-166.27s1.285-37.952-18.918-34.94c-41.781 19.612-21.38 115.042-24.865 216.872L183.572 463.8s-5.12 66.068-9.73 98.798c-4.733 33.614-8.08 67.97-18.377 100.002-7.286 22.663-14.648 47.232-30.27 63.857C112.953 739.484 95.424 759 79.25 750.554c-41.248-21.537-19.801-66.792-8.108-85.544 12.763-20.467 53.267-55.058 85.961-38.868 49.048 24.288 23.534 66.155 103.45 100.941 38.339 16.688 77.577-27.476 111.17-135.371 5.255-16.878-3.726-23.372-7.438-17.495-22.608 35.786-33.479 129.461-19.923 134.261 10.815 3.83 47.674 2.341 77.397-34.658 0 0 11.607 23.285 32.447 21.696 31.478-2.401 64.677-12.335 84.015-52.278 0 0-29.691 53.757-81.572 53.072-17.18-.227-44.278-17.733-28.254-39.974 61.092-84.794 119.93-80.814 117.639-53.492-12.75 152.033-17.806 221.575-48.368 303.013-17.539 46.737-124.686 66.179-65.126-51.38 17.25-34.049 105.779-121.227 185.593-234.32 35.237-49.93 114.312-220.154 57.717-309.515-26.065-41.155-44.11 276.883-58.736 321.042-8.998 27.168-27.852 128.825-16.797 88.225 18.955-69.615 28.862-189.82 89.343-155.233 37.735 21.58-65.723 198.541 36.697 195.54 17.401-.51 147.32-228.218 113.118-211.27-16.15 8.003-101.082 204.137-28.91 207.988 86.399 4.611 151.317-201.678 155.892-174.429 17.235 102.666-184.015 433.318-170.423 459.862 11.896 23.233 78.979-25.796 149.326-346.784 13.84-63.154 34.395-185.945 87.06-180.33 63.119 6.73 21.013 166.228-76.775 187.116-11.739 2.508 30.355 115.341 137.716-15.025 13.872-16.845 65.265-84.13 68.821-155.422 1.645-32.989-89.513 206.53-32.428 208.741 212.1 8.216 187.168-466.29 150.363-452.756-18.69 6.872-7.12 213.952-1.16 286.878 0 0-20.67 117.128-29.56 179.218-4.746 33.144 17.164-221.344 72.307-213.098 78.707 11.77-8.96 168.307 54.21 209.59 76.874 50.241 134.466-202.437 123.94-221.754-35.532-2.116-79.95 151.156-43.642 217.243 7.637 13.901 75.916 9.832 92.74-32.214 23.09-57.704 99.153-123.231 128.207-110.033 25.427 11.55 41.36-147.773 97.573-229.583 0 0-83.113 152.537-100.47 345.014-1.003 11.128-36.253 69.535-127.028 10.524 0 0 101.676 66.205 128.185-13.932 7.039-21.278 16.224 67.534 62.453 10.636 0 0 14.333 46.044 77.89 13 27.714-14.408 84.35-146.66 3.812-128.78-18.778 4.168-123.46 102.265-62.037 138.77 10.7 6.36 50.836 13.749 95.674-57.498 0 0 19.159 33.076 47.536 34.611 15.784.854 73.007-32.148 78.972-120.696 1.841-27.342 16.606-13.134 85.561-4.705 0 0-42.303 100.304-30.186 100.401 0 0 9.643 37.175 45.545 39.544 81.05 5.348 204.078-349.414 155.736-426.595-11.621-18.555-25.903 359.625-50.792 443.193 0 0 21.734-62.254 17.165-91.385-13.725-87.502 59.105-113.963 71.489-93.951 34.288 55.406-5.137 101.786-64.059 106.486-17.564 1.401 30.76-15.809 70.594 6.745 29.741 16.84 25.577 71.76 63.425 76.603 50.475 6.458 69.19-70.179 102.856-120.823 17.32-26.055 100.737 1.47 25.81 102.988 0 0 48.405-124.139 131.875-133.855 63.602-7.403-45.373 77.767-10.167 138.144 13.282 22.777 194.5-162.141 151.268-201.008-21.014-18.892-108.148 164.8-29.521 183.99 77.707 18.967 191.315-120.48 174.588-173.173 27.762 87.07 2.728 196.637-98.588 156.669 0 0 45.664 18.44 88.73-3.675 44.719-22.965 78.1-51.333 96.34-77.862 36.849-53.595 25.196-98.565 25.196-98.565s123.86 207.686-111.749 179.804c-34.707-4.107 81.189 23.116 154.443-20.666 67.448-40.31 80.52-46.195 94.012-118.296m-1890.253-6.314l-159.427 32.198m-182.975-41.983l-209.716 27.427M374.973 479.471c46.104-111.802-98.816 40.598 0 0"
        fill="none"
        stroke="#7f3331"
        strokeWidth={30}
        strokeLinecap="round"
        />
      </svg>
    </Wrapper>
        </Col>
        </Row>
        </Container>
  )
};
const Wrapper = styled.div`
  .animated {
    max-width: 300px;
    width: 100%;
    height: 100%;
   
}
    stroke-dasharray: ${(props) => props.pathLength};
    stroke-dashoffset: ${(props) => props.pathLength};
  }
  .animated.visible {
    animation: draw 5s linear forwards;
  }
  @keyframes draw {
    from {
      stroke-dashoffset: ${(props) => props.pathLength};
    }
    to {
      stroke-dashoffset: 0;
    }
  }
`

export default SvgComponent;
